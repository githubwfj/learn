server:
  port: 80
  servlet:
    context-path: /garway

spring:
  cloud:
    gateway:
      discovery:
        locator:
          enabled: false                    # 是否与服务注册于发现组件进行结合
      routes:
        - id: no_filter
          uri: http://localhost:8080
          predicates:
            # - Path=/api/base/user/login;/api/base/version
            - Path=/api/base/version->/api/base/user/login
          filters:
            - StripPrefix=1
            - IgnoreTestGlobalFilter        #在本路由启用跳过全局过滤器
        - id: jwt_gloabl_filter             # 我们自定义的路由 ID，保持唯一
          uri: http://localhost:8080        # 目标服务地址
          predicates:                       # 路由条件，Predicate 接受一个输入参数，返回一个布尔值结果。该接口包含多种默认方法来将Predicate 组合成其他复杂的逻辑（比如：与，或，非）
            - Path=/api/**
          filters:
            - StripPrefix=1                 # 去掉api
            # - RewritePath=/api, /api/test  # 重写请求路径,访问localhost/api, 请求会转发到localhost:8001/app/test
        - id: baidu
          uri: http://baidu.com
          predicates:
            - Path=/baidu/
          filters:
            - StripPrefix=1

  redis:
    database: 0                             # Redis数据库索引（默认为0）
    host: 114.55.242.55
    port: 6379
    password: 'redis2915Qaz!'
    timeout:  1000                          # 连接超时时间（毫秒）
    lettuce:
      pool:
        max-active: 8                       # 连接池最大连接数（使用负值表示没有限制） 默认 8
        max-wait: -1                        # 连接池最大阻塞等待时间（使用负值表示没有限制） 默认 -1
        max-idle: 8                         # 连接池中的最大空闲连接 默认 8
        min-idle: 0                         # 连接池中的最小空闲连接 默认 0


#  consul:
#    host: localhost
#    port: 8500
#    discovery:
#      service-name: garway